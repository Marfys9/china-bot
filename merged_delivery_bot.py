import os
import asyncio
import logging
import json
from decimal import Decimal
import aiohttp
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from typing import Dict, Optional, Union
from bs4 import BeautifulSoup
import ssl
import xml.etree.ElementTree as ET


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def parse_decimal(text: str) -> Decimal:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ Decimal —Å —É—á–µ—Ç–æ–º –∑–∞–ø—è—Ç—ã—Ö"""
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
        return Decimal(text.replace(',', '.'))
    except:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")

class DeliveryStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ –±–æ—Ç–∞"""
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    setup_cny_rate = State()
    setup_weight_tariff = State()
    setup_volume_coefficient = State()
    setup_photo_report = State()
    setup_duty_free_threshold = State()
    manual_eur_rate = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    calc_length = State()
    calc_width = State()
    calc_height = State()
    calc_weight = State()
    calc_price_cny = State()
    calc_delivery_ru = State()

class SettingsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    @staticmethod
    def save_settings(user_id: int, settings: Dict[str, Decimal]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ò–∑–º–µ–Ω—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        settings_file = f'/app/data/user_settings_{user_id}.json'
        os.makedirs('/app/data', exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        with open(settings_file, 'w') as f:
            json.dump({k: str(v) for k, v in settings.items()}, f)
    
    @staticmethod
    def load_settings(user_id: int) -> Optional[Dict[str, Decimal]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings_file = f'/app/data/user_settings_{user_id}.json'
        try:
            with open(settings_file, 'r') as f:
                settings = json.load(f)
                return {k: Decimal(v) for k, v in settings.items()}
        except (FileNotFoundError, json.JSONDecodeError):
            return None

class DeliveryBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    
    def __init__(self, token: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.last_eur_rate: Optional[Decimal] = None
        self.register_handlers()

    async def fetch_eur_rate(self) -> Optional[Decimal]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –µ–≤—Ä–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç SSL —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE

        # 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ—Ç –¶–ë –†–§
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://www.cbr.ru/scripts/XML_daily.asp', ssl=ssl_context) as response:
                    if response.status == 200:
                        data = await response.text()
                        root = ET.fromstring(data)
                        for valute in root.findall('.//Valute'):
                            if valute.find('CharCode').text == 'EUR':
                                rate_str = valute.find('Value').text.replace(',', '.')
                                rate = Decimal(rate_str)
                                self.last_eur_rate = rate
                                logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å –µ–≤—Ä–æ –¶–ë –†–§: {rate}")
                                return rate
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ –¶–ë –†–§: {e}")

        # 2. –ï—Å–ª–∏ –¶–ë –†–§ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API –¶–ë –†–§
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://www.cbr-xml-daily.ru/daily_json.js', ssl=ssl_context) as response:
                    if response.status == 200:
                        text = await response.text()
                        data = json.loads(text)
                        rate = Decimal(str(data['Valute']['EUR']['Value']))
                        self.last_eur_rate = rate
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å –µ–≤—Ä–æ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API –¶–ë –†–§: {rate}")
                        return rate
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API –¶–ë –†–§: {e}")

        # 3. –ï—Å–ª–∏ –æ–±–∞ –º–µ—Ç–æ–¥–∞ –¶–ë –†–§ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º Google Finance
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://www.google.com/finance/quote/EUR-RUB', ssl=ssl_context) as response:
                    if response.status == 200:
                        data = await response.text()
                        soup = BeautifulSoup(data, 'html.parser')
                        rate_element = soup.select_one('div[data-last-price]')
                        if rate_element:
                            rate = Decimal(rate_element['data-last-price'])
                            self.last_eur_rate = rate
                            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å –µ–≤—Ä–æ Google Finance: {rate}")
                            return rate
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ Google Finance: {e}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫—É—Ä—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if self.last_eur_rate:
            logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å –µ–≤—Ä–æ: {self.last_eur_rate}")
            return self.last_eur_rate

        # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –µ–≤—Ä–æ –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤")
        return None

    def get_main_keyboard(self) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìä –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç")],
                [KeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")],
                [KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç")]
            ],
            resize_keyboard=True
        )


    def register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
        
        @self.dp.message(Command('start'))
        async def start_command(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
            user_settings = SettingsManager.load_settings(message.from_user.id)
            if user_settings:
                await message.answer(
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=self.get_main_keyboard()
                )
            else:
                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç.")
                await state.set_state(DeliveryStates.setup_cny_rate)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å CNY (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5):")

        @self.dp.message(Command('restart'))
        async def restart_command(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
            await state.clear()
            await start_command(message, state)

        @self.dp.message(F.text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç")
        async def restart_button(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
            await restart_command(message, state)

        @self.dp.message(F.text == "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        async def settings_menu(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
            await message.answer(
                "–î–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.set_state(DeliveryStates.setup_cny_rate)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å CNY (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5):")

        @self.dp.message(DeliveryStates.setup_cny_rate)
        async def process_cny_rate(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–∞ CNY"""
            try:
                rate = parse_decimal(message.text)
                if rate <= 0:
                    raise ValueError("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                
                await state.update_data(cny_rate=rate)
                await state.set_state(DeliveryStates.setup_weight_tariff)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ –≤–µ—Å—É (—Ä—É–±/–∫–≥):")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5)")

        @self.dp.message(DeliveryStates.setup_weight_tariff)
        async def process_weight_tariff(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ –≤–µ—Å—É"""
            try:
                tariff = parse_decimal(message.text)
                if tariff <= 0:
                    raise ValueError("–¢–∞—Ä–∏—Ñ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                
                await state.update_data(weight_tariff=tariff)
                await state.set_state(DeliveryStates.setup_volume_coefficient)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞ –¥–æ–ø. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (—Ä—É–±/–∫–≥):")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5)")

        @self.dp.message(DeliveryStates.setup_volume_coefficient)
        async def process_volume_coefficient(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—ä–µ–º–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"""
            try:
                coefficient = parse_decimal(message.text)
                if coefficient <= 0:
                    raise ValueError("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                
                await state.update_data(volume_coefficient=coefficient)
                await state.set_state(DeliveryStates.setup_photo_report)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞:")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5)")

        @self.dp.message(DeliveryStates.setup_photo_report)
        async def process_photo_report(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞"""
            try:
                cost = parse_decimal(message.text)
                if cost < 0:
                    raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
                
                await state.update_data(photo_report=cost)
                await state.set_state(DeliveryStates.setup_duty_free_threshold)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –±–µ—Å–ø–æ—à–ª–∏–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ (EUR):")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5)")

        @self.dp.message(DeliveryStates.setup_duty_free_threshold)
        async def process_duty_free_threshold(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–µ—Å–ø–æ—à–ª–∏–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞"""
            try:
                threshold = parse_decimal(message.text)
                if threshold <= 0:
                    raise ValueError("–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                
                data = await state.get_data()
                settings = {
                    'cny_rate': data['cny_rate'],
                    'weight_tariff': data['weight_tariff'],
                    'volume_coefficient': data['volume_coefficient'],
                    'photo_report': data['photo_report'],
                    'duty_free_threshold': threshold
                }
                SettingsManager.save_settings(message.from_user.id, settings)
                
                settings_info = f"""
‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚îî üí¥ –ö—É—Ä—Å CNY: {settings['cny_rate']}
‚îî ‚öñÔ∏è –¢–∞—Ä–∏—Ñ –ø–æ –≤–µ—Å—É: {settings['weight_tariff']} —Ä—É–±/–∫–≥
‚îî üìè –û–±—ä–µ–º–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {settings['volume_coefficient']} —Ä—É–±/–∫–≥
‚îî üì∏ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞: {settings['photo_report']} —Ä—É–±
‚îî üèõÔ∏è –ë–µ—Å–ø–æ—à–ª–∏–Ω–Ω—ã–π –ø–æ—Ä–æ–≥: {settings['duty_free_threshold']} EUR
"""
                await message.answer(settings_info)
                await message.answer(
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=self.get_main_keyboard()
                )
                await state.clear()
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5)")


        @self.dp.message(F.text == "üìä –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç")
        async def start_calculation(message: Message, state: FSMContext):
            """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—á–µ—Ç–∞"""
            await state.set_state(DeliveryStates.calc_length)
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É (—Å–º):",
                reply_markup=ReplyKeyboardRemove()
            )

        @self.dp.message(DeliveryStates.calc_length)
        async def process_length(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–ª–∏–Ω—ã"""
            try:
                length = parse_decimal(message.text)
                if length <= 0:
                    raise ValueError("–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                
                await state.update_data(length=length)
                await state.set_state(DeliveryStates.calc_width)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É (—Å–º):")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5)")

        @self.dp.message(DeliveryStates.calc_width)
        async def process_width(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —à–∏—Ä–∏–Ω—ã"""
            try:
                width = parse_decimal(message.text)
                if width <= 0:
                    raise ValueError("–®–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                
                await state.update_data(width=width)
                await state.set_state(DeliveryStates.calc_height)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É (—Å–º):")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5)")

        @self.dp.message(DeliveryStates.calc_height)
        async def process_height(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—ã—Å–æ—Ç—ã"""
            try:
                height = parse_decimal(message.text)
                if height <= 0:
                    raise ValueError("–í—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                
                await state.update_data(height=height)
                await state.set_state(DeliveryStates.calc_weight)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5)")

        @self.dp.message(DeliveryStates.calc_weight)
        async def process_weight(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
            try:
                weight = parse_decimal(message.text)
                if weight <= 0:
                    raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                
                await state.update_data(weight=weight)
                await state.set_state(DeliveryStates.calc_price_cny)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (CNY):")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5)")

        @self.dp.message(DeliveryStates.calc_price_cny)
        async def process_price_cny(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —é–∞–Ω—è—Ö"""
            try:
                price = parse_decimal(message.text)
                if price <= 0:
                    raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                
                await state.update_data(price_cny=price)
                await state.set_state(DeliveryStates.calc_delivery_ru)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –†–§ (—Ä—É–±):")
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5)")

        @self.dp.message(DeliveryStates.calc_delivery_ru)
        async def process_delivery_ru(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –†–§"""
            try:
                delivery_ru = parse_decimal(message.text)
                if delivery_ru < 0:
                    raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
                
                await state.update_data(delivery_ru=delivery_ru)
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞—Å—á–µ—Ç—É
                await process_calculation(message, state)
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5)")

        async def process_calculation(message: Message, state: FSMContext):
            """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
            try:
                data = await state.get_data()
                settings = SettingsManager.load_settings(message.from_user.id)
                
                if not settings:
                    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç –∑–∞–Ω–æ–≤–æ.")
                    return

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –µ–≤—Ä–æ
                eur_rate = await self.fetch_eur_rate()
                if not eur_rate:
                    await message.answer(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –µ–≤—Ä–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –µ–≤—Ä–æ –≤—Ä—É—á–Ω—É—é:"
                    )
                    await state.set_state(DeliveryStates.manual_eur_rate)
                    return

                # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞
                volume = (data['length'] / 100) * (data['width'] / 100) * (data['height'] / 100)  # –≤ –º¬≥
                volume_weight = volume * Decimal('167')
                
                # –†–∞—Å—á–µ—Ç –¥–æ–ø. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∑–∞ –æ–±—ä–µ–º
                volume_coefficient = Decimal('0')
                if volume_weight > data['weight']:
                    volume_coefficient = (volume_weight - data['weight']) * settings['volume_coefficient']

                # –†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –î–ü
                delivery_cost = (data['weight'] * settings['weight_tariff']) + volume_coefficient

                # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –µ–≤—Ä–æ –∏ –ø–æ—à–ª–∏–Ω—ã
                price_eur = (data['price_cny'] * settings['cny_rate']) / eur_rate
                
                # –†–∞—Å—á–µ—Ç –ø–æ—à–ª–∏–Ω—ã
                duty = Decimal('0')
                if price_eur > settings['duty_free_threshold']:
                    duty_excess = price_eur - settings['duty_free_threshold']
                    base_duty = (duty_excess * Decimal('0.15')) * eur_rate + Decimal('500')
                    duty = base_duty * Decimal('1.05')

                # –†–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ –†–§
                total_cost = (
                    (data['price_cny'] * settings['cny_rate']) +  # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
                    delivery_cost +  # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –î–ü
                    data['delivery_ru'] +  # –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§
                    duty +  # –ü–æ—à–ª–∏–Ω–∞
                    settings['photo_report']  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞
                )

                # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –Ω–∞—Ü–µ–Ω–∫–∞–º–∏
                cost_20_percent = total_cost * Decimal('1.2')
                cost_30_percent = total_cost * Decimal('1.3')

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result = f"""
‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚îî üí¥ –ö—É—Ä—Å CNY: {settings['cny_rate']}
‚îî ‚öñÔ∏è –¢–∞—Ä–∏—Ñ –ø–æ –≤–µ—Å—É: {settings['weight_tariff']} —Ä—É–±/–∫–≥
‚îî üìè –û–±—ä–µ–º–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {settings['volume_coefficient']} —Ä—É–±/–∫–≥
‚îî üì∏ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞: {settings['photo_report']} —Ä—É–±
‚îî üèõÔ∏è –ë–µ—Å–ø–æ—à–ª–∏–Ω–Ω—ã–π –ø–æ—Ä–æ–≥: {settings['duty_free_threshold']} EUR

üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å—ã–ª–∫–∏:
‚îî üíµ –¶–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö: {data['price_cny']} CNY
‚îî üìê –ì–∞–±–∞—Ä–∏—Ç—ã (–í√ó–®√ó–î): {data['height']}√ó{data['width']}√ó{data['length']} —Å–º
‚îî ‚öñÔ∏è –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—Å: {data['weight']} –∫–≥
‚îî üìä –û–±—ä–µ–º–Ω—ã–π –≤–µ—Å: {volume_weight:.2f} –∫–≥

üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:
‚îî üèõÔ∏è –ü—Ä–∏ –∫—É—Ä—Å–µ –µ–≤—Ä–æ {eur_rate} - –ø–æ—à–ª–∏–Ω–∞ –±—É–¥–µ—Ç {duty:.2f} —Ä—É–±
‚îî üìà –î–æ–ø. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞ –æ–±—ä–µ–º: {volume_coefficient:.2f} —Ä—É–±
‚îî üöö –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –î–ü: {delivery_cost:.2f} —Ä—É–±
‚îî üíé –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –¥–æ—Å—Ç –¥–æ –†–§: {total_cost:.2f} —Ä—É–±
‚îî üíπ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 20%: {cost_20_percent:.2f} —Ä—É–±
‚îî üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 30%: {cost_30_percent:.2f} —Ä—É–±
‚îî üöõ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§: {data['delivery_ru']} —Ä—É–±
"""
                await message.answer(result, reply_markup=self.get_main_keyboard())
                await state.clear()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {e}")
                await message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=self.get_main_keyboard()
                )
                await state.clear()

        @self.dp.message(DeliveryStates.manual_eur_rate)
        async def process_manual_eur_rate(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –µ–≤—Ä–æ –≤—Ä—É—á–Ω—É—é"""
            try:
                eur_rate = parse_decimal(message.text)
                if eur_rate <= 0:
                    raise ValueError("–ö—É—Ä—Å –µ–≤—Ä–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                
                self.last_eur_rate = eur_rate
                await process_calculation(message, state)
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12,5)")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    load_dotenv()
    bot = DeliveryBot(os.getenv('BOT_TOKEN'))
    try:
        await bot.dp.start_polling(bot.bot)
    finally:
        await bot.bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())